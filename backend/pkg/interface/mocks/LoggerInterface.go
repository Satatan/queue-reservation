// Code generated by mockery v2.10.4. DO NOT EDIT.

package mock_util

import mock "github.com/stretchr/testify/mock"

// LoggerInterface is an autogenerated mock type for the LoggerInterface type
type LoggerInterface struct {
	mock.Mock
}

// Debug provides a mock function with given fields: args
func (_m *LoggerInterface) Debug(args ...interface{}) error {
	var caDebug []interface{}
	caDebug = append(caDebug, args...)
	retDebug := _m.Called(caDebug...)

	var r0Debug error
	if rfDebug, ok := retDebug.Get(0).(func(...interface{}) error); ok {
		r0Debug = rfDebug(args...)
	} else {
		r0Debug = retDebug.Error(0)
	}

	return r0Debug
}

// Error provides a mock function with given fields: args
func (_m *LoggerInterface) Error(args ...interface{}) error {
	var caError []interface{}
	caError = append(caError, args...)
	retError := _m.Called(caError...)

	var r0Error error
	if rfError, ok := retError.Get(0).(func(...interface{}) error); ok {
		r0Error = rfError(args...)
	} else {
		r0Error = retError.Error(0)
	}

	return r0Error
}

// Fatal provides a mock function with given fields: args
func (_m *LoggerInterface) Fatal(args ...interface{}) error {
	var caFatal []interface{}
	caFatal = append(caFatal, args...)
	retFatal := _m.Called(caFatal...)

	var r0Fatal error
	if rf, ok := retFatal.Get(0).(func(...interface{}) error); ok {
		r0Fatal = rf(args...)
	} else {
		r0Fatal = retFatal.Error(0)
	}

	return r0Fatal
}

// Flush provides a mock function with given fields:
func (_m *LoggerInterface) Flush() {
	_m.Called()
}

// Info provides a mock function with given fields: args
func (_m *LoggerInterface) Info(args ...interface{}) error {
	var caInfo []interface{}
	caInfo = append(caInfo, args...)
	ret := _m.Called(caInfo...)

	var r0Info error
	if rfInfo, ok := ret.Get(0).(func(...interface{}) error); ok {
		r0Info = rfInfo(args...)
	} else {
		r0Info = ret.Error(0)
	}

	return r0Info
}

// InfoWithFields provides a mock function with given fields: fields, args
func (_m *LoggerInterface) InfoWithFields(fields map[string]interface{}, args ...interface{}) error {
	var caInfoWithFields []interface{}
	caInfoWithFields = append(caInfoWithFields, fields)
	caInfoWithFields = append(caInfoWithFields, args...)
	retInfoWithFields := _m.Called(caInfoWithFields...)

	var r0InfoWithFields error
	if rfInfoWithFields, ok := retInfoWithFields.Get(0).(func(map[string]interface{}, ...interface{}) error); ok {
		r0InfoWithFields = rfInfoWithFields(fields, args...)
	} else {
		r0InfoWithFields = retInfoWithFields.Error(0)
	}

	return r0InfoWithFields
}

// WarningWithFields provides a mock function with given fields: fields, args
func (_m *LoggerInterface) WarningWithFields(fields map[string]interface{}, args ...interface{}) error {
	var caWarningWithFields []interface{}
	caWarningWithFields = append(caWarningWithFields, fields)
	caWarningWithFields = append(caWarningWithFields, args...)
	retWarningWithFields := _m.Called(caWarningWithFields...)

	var r0WarningWithFields error
	if rfWarningWithFields, ok := retWarningWithFields.Get(0).(func(map[string]interface{}, ...interface{}) error); ok {
		r0WarningWithFields = rfWarningWithFields(fields, args...)
	} else {
		r0WarningWithFields = retWarningWithFields.Error(0)
	}

	return r0WarningWithFields
}

// ErrorWithFields provides a mock function with given fields: fields, args
func (_m *LoggerInterface) ErrorWithFields(fields map[string]interface{}, args ...interface{}) error {
	var caErrorWithFields []interface{}
	caErrorWithFields = append(caErrorWithFields, fields)
	caErrorWithFields = append(caErrorWithFields, args...)
	retErrorWithFields := _m.Called(caErrorWithFields...)

	var r0ErrorWithFields error
	if rfErrorWithFields, ok := retErrorWithFields.Get(0).(func(map[string]interface{}, ...interface{}) error); ok {
		r0ErrorWithFields = rfErrorWithFields(fields, args...)
	} else {
		r0ErrorWithFields = retErrorWithFields.Error(0)
	}

	return r0ErrorWithFields
}

// InfoWithIP provides a mock function with given fields: IP, args
func (_m *LoggerInterface) InfoWithIP(IP string, args ...interface{}) error {
	var caInfoWithIP []interface{}
	caInfoWithIP = append(caInfoWithIP, IP)
	caInfoWithIP = append(caInfoWithIP, args...)
	retInfoWithIP := _m.Called(caInfoWithIP...)

	var r0InfoWithIP error
	if rfInfoWithIP, ok := retInfoWithIP.Get(0).(func(string, ...interface{}) error); ok {
		r0InfoWithIP = rfInfoWithIP(IP, args...)
	} else {
		r0InfoWithIP = retInfoWithIP.Error(0)
	}

	return r0InfoWithIP
}




// Warn provides a mock function with given fields: args
func (_m *LoggerInterface) Warn(args ...interface{}) error {
	var caWarn []interface{}
	caWarn = append(caWarn, args...)
	retWarn := _m.Called(caWarn...)

	var r0Warn error
	if rfWarn, ok := retWarn.Get(0).(func(...interface{}) error); ok {
		r0Warn = rfWarn(args...)
	} else {
		r0Warn = retWarn.Error(0)
	}

	return r0Warn
}
