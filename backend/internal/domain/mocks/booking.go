// Code generated by MockGen. DO NOT EDIT.
// Source: ./booking.go

// Package mocks is a generated GoMock package.
package mock_domain

import (
	models "queue_reservation/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBookingUsecaseInterface is a mock of BookingUsecaseInterface interface.
type MockBookingUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBookingUsecaseInterfaceMockRecorder
}

// MockBookingUsecaseInterfaceMockRecorder is the mock recorder for MockBookingUsecaseInterface.
type MockBookingUsecaseInterfaceMockRecorder struct {
	mock *MockBookingUsecaseInterface
}

// NewMockBookingUsecaseInterface creates a new mock instance.
func NewMockBookingUsecaseInterface(ctrl *gomock.Controller) *MockBookingUsecaseInterface {
	mock := &MockBookingUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockBookingUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingUsecaseInterface) EXPECT() *MockBookingUsecaseInterfaceMockRecorder {
	return m.recorder
}

// CancelBooking mocks base method.
func (m *MockBookingUsecaseInterface) CancelBooking(branch models.Branch, booking models.Booking) (*models.TableCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBooking", branch, booking)
	ret0, _ := ret[0].(*models.TableCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBooking indicates an expected call of CancelBooking.
func (mr *MockBookingUsecaseInterfaceMockRecorder) CancelBooking(branch, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBooking", reflect.TypeOf((*MockBookingUsecaseInterface)(nil).CancelBooking), branch, booking)
}

// CreateBooking mocks base method.
func (m *MockBookingUsecaseInterface) CreateBooking(branch models.Branch, booking models.Booking) (*uint64, *models.TableCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", branch, booking)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(*models.TableCount)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingUsecaseInterfaceMockRecorder) CreateBooking(branch, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingUsecaseInterface)(nil).CreateBooking), branch, booking)
}

// MockBookingRepositoryInterface is a mock of BookingRepositoryInterface interface.
type MockBookingRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBookingRepositoryInterfaceMockRecorder
}

// MockBookingRepositoryInterfaceMockRecorder is the mock recorder for MockBookingRepositoryInterface.
type MockBookingRepositoryInterfaceMockRecorder struct {
	mock *MockBookingRepositoryInterface
}

// NewMockBookingRepositoryInterface creates a new mock instance.
func NewMockBookingRepositoryInterface(ctrl *gomock.Controller) *MockBookingRepositoryInterface {
	mock := &MockBookingRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockBookingRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBookingRepositoryInterface) EXPECT() *MockBookingRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CancelBooking mocks base method.
func (m *MockBookingRepositoryInterface) CancelBooking(branch models.Branch, booking models.Booking) (*models.TableCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelBooking", branch, booking)
	ret0, _ := ret[0].(*models.TableCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelBooking indicates an expected call of CancelBooking.
func (mr *MockBookingRepositoryInterfaceMockRecorder) CancelBooking(branch, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelBooking", reflect.TypeOf((*MockBookingRepositoryInterface)(nil).CancelBooking), branch, booking)
}

// CreateBooking mocks base method.
func (m *MockBookingRepositoryInterface) CreateBooking(branch models.Branch, booking models.Booking) (*uint64, *models.TableCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBooking", branch, booking)
	ret0, _ := ret[0].(*uint64)
	ret1, _ := ret[1].(*models.TableCount)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateBooking indicates an expected call of CreateBooking.
func (mr *MockBookingRepositoryInterfaceMockRecorder) CreateBooking(branch, booking interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBooking", reflect.TypeOf((*MockBookingRepositoryInterface)(nil).CreateBooking), branch, booking)
}
