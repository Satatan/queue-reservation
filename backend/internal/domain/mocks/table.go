// Code generated by MockGen. DO NOT EDIT.
// Source: ./table.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	models "queue_reservation/internal/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTableUsecaseInterface is a mock of TableUsecaseInterface interface.
type MockTableUsecaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTableUsecaseInterfaceMockRecorder
}

// MockTableUsecaseInterfaceMockRecorder is the mock recorder for MockTableUsecaseInterface.
type MockTableUsecaseInterfaceMockRecorder struct {
	mock *MockTableUsecaseInterface
}

// NewMockTableUsecaseInterface creates a new mock instance.
func NewMockTableUsecaseInterface(ctrl *gomock.Controller) *MockTableUsecaseInterface {
	mock := &MockTableUsecaseInterface{ctrl: ctrl}
	mock.recorder = &MockTableUsecaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableUsecaseInterface) EXPECT() *MockTableUsecaseInterfaceMockRecorder {
	return m.recorder
}

// InitializeTables mocks base method.
func (m *MockTableUsecaseInterface) InitializeTables(branch models.Branch) (*models.TableCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeTables", branch)
	ret0, _ := ret[0].(*models.TableCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeTables indicates an expected call of InitializeTables.
func (mr *MockTableUsecaseInterfaceMockRecorder) InitializeTables(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeTables", reflect.TypeOf((*MockTableUsecaseInterface)(nil).InitializeTables), branch)
}

// MockTableRepositoryInterface is a mock of TableRepositoryInterface interface.
type MockTableRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTableRepositoryInterfaceMockRecorder
}

// MockTableRepositoryInterfaceMockRecorder is the mock recorder for MockTableRepositoryInterface.
type MockTableRepositoryInterfaceMockRecorder struct {
	mock *MockTableRepositoryInterface
}

// NewMockTableRepositoryInterface creates a new mock instance.
func NewMockTableRepositoryInterface(ctrl *gomock.Controller) *MockTableRepositoryInterface {
	mock := &MockTableRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockTableRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTableRepositoryInterface) EXPECT() *MockTableRepositoryInterfaceMockRecorder {
	return m.recorder
}

// InitializeTables mocks base method.
func (m *MockTableRepositoryInterface) InitializeTables(branch models.Branch) (*models.TableCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeTables", branch)
	ret0, _ := ret[0].(*models.TableCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeTables indicates an expected call of InitializeTables.
func (mr *MockTableRepositoryInterfaceMockRecorder) InitializeTables(branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeTables", reflect.TypeOf((*MockTableRepositoryInterface)(nil).InitializeTables), branch)
}
